; JSON Grammar
JSON-text = ws value ws

begin-array     = ws %x5B ws  ; [ left square bracket
begin-object    = ws %x7B ws  ; { left curly bracket
end-array       = ws %x5D ws  ; ] right square bracket
end-object      = ws %x7D ws  ; } right curly bracket
name-separator  = ws %x3A ws  ; : colon
value-separator = ws %x2C ws  ; , comma

ws = *( %x20 / %x09 / %x0A / %x0D )
        ; Space / Horizontal tab / Line feed or New line / Carriage return

; Values
value = false / null / true / object / array / number / string
false = %x66.61.6c.73.65   ; false
null  = %x6e.75.6c.6c      ; null
true  = %x74.72.75.65      ; true

; Objects
object = begin-object [ member *( value-separator member ) ] end-object
member = string name-separator value

; Arrays
array = begin-array [ value *( value-separator value ) ] end-array

; Numbers
number = [ minus ] int [ frac ] [ exp ]
decimal-point = %x2E       ; .
digit1-9 = %x31-39         ; 1-9
e = %x65 / %x45            ; e E
exp = e [ minus / plus ] 1*DIGIT
frac = decimal-point 1*DIGIT
int = zero / ( digit1-9 *DIGIT )
minus = %x2D               ; -
plus = %x2B                ; +
zero = %x30                ; 0

; Strings
string = quotation-mark *char quotation-mark
char = unescaped /
    escape ( %x22 / %x5C / %x2F / %x62 / %x66 / %x6E / %x72 / %x74 / %x75 4HEXDIG )
        ; "    quotation mark  U+0022
        ; \    reverse solidus U+005C
        ; /    solidus         U+002F
        ; b    backspace       U+0008
        ; f    form feed       U+000C
        ; n    line feed       U+000A
        ; r    carriage return U+000D
        ; t    tab             U+0009
        ; uXXXX                U+XXXX
escape = %x5C              ; \
quotation-mark = %x22      ; "
unescaped = %x20-21 / %x23-5B / %x5D-10FFFF
